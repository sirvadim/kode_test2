{"version":3,"sources":["Screens/Sets/Sets.jsx","Screens/Cards/Cards.jsx","actions/loadCards.js","actions/loadSets.js","App.js","serviceWorker.js","index.js","reducers/index.js"],"names":["Sets","this","props","set","standardLegal","react_default","a","createElement","expandedLegal","Link","style","textDecoration","className","to","concat","code","src","logo","alt","name","symbolUrl","releaseDate","Component","Cards","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","param","URLSearchParams","location","search","get","onGetCards","store","cardsLoaded","cards","length","map","card","index","key","imageUrl","connect","state","dispatch","getCards","pokemon","all","setCode","on","push","type","asyncGetCards","asyncGetSets","sets","getSets","logoUrl","reverse","App","BrowserRouter","Switch","Route","path","render","Screens_Sets_Sets","exact","component","Redirect","from","onGetSets","Boolean","window","hostname","match","createStore","arguments","undefined","action","console","log","objectSpread","composeWithDevTools","applyMiddleware","thunk","subscribe","getState","ReactDOM","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f4cdc46d.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport '../../App.css'\nimport { Link } from 'react-router-dom'\nclass Sets extends Component {\n  standardLegal() {\n      if(this.props.set.standardLegal)\n        return <li>Standard Legal</li>\n  }\n  expandedLegal() {\n    if(this.props.set.expandedLegal)\n      return <li>Expanded Legal</li>\n  }\n  render() {\n    return (\n      <Link style={{ textDecoration: 'none' }} className = \"set hvr-grow\" to = {`/kode_test2/cards?setCode=${this.props.set.code}`}>\n        <div>\n            <div className = \"content-image\">\n                <img className = \"set-image\" src={this.props.set.logo} alt={this.props.set.name}/>\n            </div>\n            <div className = \"set-content\">\n                <div className = \"media\">\n                    <div className = \"media-left\">\n                        <figure className = \"image is-48x48\">\n                            <img className = \"set-image\" src={this.props.set.symbolUrl} alt=\"\"/>\n                        </figure>\n                    </div>\n                    <div className = \"media-content\">\n                        <p className = \"title is-4\">{this.props.set.name}</p>\n                        <p className = \"subtitle is-6\">{'Released ' + this.props.set.releaseDate}</p>\n                    </div>\n                </div>\n                <div className = \"content\">\n                    <ul>\n                        {this.standardLegal()}\n                        {this.expandedLegal()}\n                    </ul>\n                </div>\n            </div>\n        </div>\n      </Link>\n    );\n  }\n}\n\nexport default Sets;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux'\nimport { asyncGetCards } from '../../actions/loadCards'\nclass Cards extends Component {\n  constructor( props ) {\n    super(props);\n    this.param = new URLSearchParams(this.props.location.search).get('setCode')\n    this.props.onGetCards(this.param)\n  }\n  render() {\n    if(!this.props.store.cardsLoaded)\n      return(\n        <h1>Loading...</h1>\n      )\n\n    if (!this.param || this.props.store.cards.length === 0)\n      return(<h1>set's error</h1>)\n\n    return (\n      <div className = \"container\">\n        <div className = \"columns pkmn-gallery fade-in\">\n          <div className = \"column\">\n            {this.props.store.cards.map((card, index) =>\n                <img key={index} src={card.imageUrl} className = \"hvr-grow\" alt = {card.name}/>\n            )}\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default connect(\n  state => ({\n    store: state\n  }),\n  dispatch => ({\n    onGetCards: ( code ) => {\n      dispatch(asyncGetCards(code));\n    }\n  })\n)(Cards);","import pokemon from 'pokemontcgsdk'\n\nexport const asyncGetCards = (code) => dispatch => {\n    let cards = [];\n    let getCards = pokemon.card.all({ setCode: code })\n    getCards.on('data', card => cards.push(card))\n    getCards.on('end', () => {\n        return dispatch({ type: 'LOAD_CARDS', cards: cards, cardsLoaded: true });\n    })\n}","import pokemon from 'pokemontcgsdk'\n\nexport const asyncGetSets = () => dispatch => {\n    let sets = [];\n    let getSets = pokemon.set.all();\n    getSets.on('data', set => {\n        sets.push({\n            code: set.code,\n            name: set.name,\n            logo: set.logoUrl,\n            symbolUrl: set.symbolUrl,\n            standardLegal: set.standardLegal,\n            expandedLegal: set.expandedLegal,\n            releaseDate: set.releaseDate\n        })\n    })\n    getSets.on('end', () => {\n        dispatch({ type: 'LOAD_SETS', sets: sets.reverse() });\n    })\n}","import React, { Component } from 'react';\nimport { BrowserRouter, Route, Redirect, Switch } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport './App.css';\nimport Sets from './Screens/Sets/Sets'\nimport Cards from './Screens/Cards/Cards'\nimport { asyncGetSets } from './actions/loadSets'\nclass App extends Component {\n\n  render() {\n    return (\n      <BrowserRouter>\n        <div className = \"section\">\n          <div className = \"set-gallery\">\n            <Switch>\n              <Route path = \"/kode_test2/sets\" render={()=> this.props.store.sets.map((set, index) =>\n                <Sets key={index} set={set}/>\n              )}/>\n              <Route exact path = \"/kode_test2/cards\" search = \"?setCode=:code\" component = {Cards}/>\n              <Redirect from=\"/\" exact to=\"/kode_test2/sets\" />\n              <Redirect from=\"/kode_test2/\" exact to=\"/kode_test2/sets\" />\n            </Switch>\n          </div>\n        </div>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default connect(\n  state => ({\n    store: state\n  }),\n  dispatch => ({\n    onGetSets: () => {\n      dispatch(asyncGetSets());\n    }\n  })\n)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport reducer from './reducers';\n\nimport { asyncGetSets } from './actions/loadSets'\n\nconst store = createStore(reducer, composeWithDevTools(applyMiddleware(thunk)));\n\nstore.subscribe(() => {\n    console.log('state', store.getState())\n})\n\nstore.dispatch(asyncGetSets());\n\nReactDOM.render(\n    <Provider store = {store}>\n        <App/>\n    </Provider>,\ndocument.getElementById('root'));\n\nserviceWorker.unregister();\n","export default function reducer (state = { sets:[], cards:[] }, action) {\n    console.log('reducer', state, action)\n    if (action.type === 'LOAD_SETS') {\n        return {\n            ...state,\n            sets: action.sets\n        };\n    } else if (action.type === 'LOAD_CARDS') {\n        return {\n            ...state,\n            cards: action.cards,\n            cardsLoaded: action.cardsLoaded\n        }\n    }\n    return state;\n}"],"sourceRoot":""}